// 이중연결리스트.txt

이중연결리스트(--, ++) : 일반적으로 가장 많이 사용된다.
- 단일 연결리스트의 이동(++)의 단점 극복
- 노드당 메모리가 증가(전 메모리를 가르키는 것)

- head :  
- tail : 

이중연결리스트 시작점
노드 정의(구조체): Node [][30][]
Node* head = NULL;
Node* tail = NULL;
int size = 0;

1) 노드 구조체 정의
2) 이중연결리스트 구조체 정의
이중연결리스트 변수 선언

PUSH_FRONT
1) 노드 생성 및 초기화
2) 연결과정 (새로운 노드를 먼저 연결)
- 비어있는 상황

- 노드가 존재하는 상황

PUSH_BACK
1) newnode->prev = tail;
2) tail->next = newnode;
3) tail = newnode;

PUSH
1) 양쪽에 노드가 다 존재하는 상황
2) 오른쪽에만 노드가 있는 상황(cur == tail) : push_back과 동일상황

pop_front
1) 노드가 하나인 경우
- head = NULL, tail = NULL;
2) 노드가 두개 이상인 경우
- 삭제할 노드의 주소를 저장
Node* del = head;
- 삭제할 노드를 연결에서 제외
- del 노드를 힙 메모리에서 제거

pop_back
1) 노드가 하나인 경우
pop_front와 동일
2) 노드가 두개 이상인 경우
- 삭제할 노드의 주소를 저장
Node* del = tail;
- 삭제할 노드를 연결에서 제외
- del 노드를 힙 메모리에서 제거

pop
1) 첫번째 노드 삭제 - pop_front
2) 마지막 노드 삭제 - pop_back
3) 중간 노드 삭제